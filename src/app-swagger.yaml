openapi: 3.0.3
info:
  title: Product Store API
  description: API for managing products and user authentication in the store
  version: 1.0.0
servers:
  - url: http://localhost:8000/api
paths:
  /products:
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    
    post:
      summary: Create a new product
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
        '500':
          description: Internal server error
  
  /products/{productId}:
    get:
      summary: Get a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Internal server error

    put:
      tags:
        - Products
      summary: Update Product
      description: This can only be done by the logged in user.
      operationId: productId
      parameters:
        - name: productId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent products in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        default:
          description: successful operation
      security:
        - BearerAuth: []

    delete:
      tags:
        - Products
      summary: Delete a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid product value
      security:
        - BearerAuth: []
    

  /auth/signup:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating successful registration
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /auth/signin:
    post:
      summary: Authenticate user and get access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating successful login
                  user:
                    $ref: '#/components/schemas/User'
                  accessToken:
                    type: string
                    description: JWT access token
        '400':
          description: Bad request
        '404':
          description: User not found
        '500':
          description: Internal server error

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          description: The product ID
        name:
          type: string
          description: The name of the product
        price:
          type: number
          description: The price of the product
        category:
          type: string
          description: The category of the product
        description:
          type: string
          description: The description of the product

    NewProduct:
      type: object
      properties:
        name:
          type: string
          description: The name of the product
          example: Clothes Summer Male
        price:
          type: number
          description: The price of the product
          example: 30000
        category:
          type: string
          description: The category of the product
          example: 65fe741941c06c823cec1aeb
        description:
          type: string
          description: The description of the product
          example: Ahihi Ahihi Ahihi
      required:
        - name
        - price
        - category

    RegisterInput:
      type: object
      properties:
        userName:
          type: string
          description: The username of the user
          example: luongphong92004
        email:
          type: string
          format: email
          description: The email address of the user
          example: luongbaphong20041@gmail.com
        password:
          type: string
          format: password
          description: The password of the user
          example: phonglb2004
        confirmPassword:
          type: string
          format: password
          description: The password of the user
          example: phonglb2004
      required:
        - userName
        - email
        - password
        - confirmPassword

    LoginInput:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The email address of the user
          example: luongbaphong20041@gmail.com
        password:
          type: string
          format: password
          description: The password of the user
          example: phonglb2309@
      required:
        - email
        - password

    User:
      type: object
      properties:
        userName:
          type: string
          description: The username of the user
        email:
          type: string
          format: email
          description: The email address of the user
        password:
          type: string
          format: password
          description: The password of the user

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
